{"ast":null,"code":"import Utility from \"../../../../../../js/Utility.js\";\nexport default class FarmScene extends Phaser.Scene {\n  constructor() {\n    super({\n      key: 'FarmScene'\n    });\n  }\n  preload() {\n    // this.load.bitmapFont('pixelFont', '../fonts/pixeloperatorbitmap.png', '../fonts/pixeloperatorbitmap.xml');\n\n    this.load.image('farmBackground', '../assets/farm-background.png');\n    this.load.image('mountains', '../assets/mountains.png');\n    this.load.image('fence', '../assets/fence.png');\n    this.load.spritesheet('farmhouseSpritesheet', '../assets/farmhouse-animation.png', {\n      frameWidth: 80,\n      frameHeight: 128\n    });\n    this.load.image('market', '../assets/market.png');\n    this.load.image('sun', '../assets/sun.png');\n    this.load.image('plot', '../assets/plot.png');\n    this.load.image('cloud1', '../assets/clouds/cloud1.png');\n    this.load.image('cloud2', '../assets/clouds/cloud2.png');\n    this.load.image('cloud3', '../assets/clouds/cloud3.png');\n    this.load.image('cloud4', '../assets/clouds/cloud4.png');\n    this.load.image('cloud5', '../assets/clouds/cloud5.png');\n    this.load.image('cloud6', '../assets/clouds/cloud6.png');\n  }\n  create() {\n    this.add.image(320, 600, 'farmBackground').setDepth(-2);\n    this.add.image(320, 570, 'mountains');\n    this.sun = this.add.sprite(320, 490, 'sun');\n    this.sun.setInteractive();\n    Utility.addTintOnHover(this.sun);\n    this.clouds = [];\n    this.cloudImages = ['cloud1', 'cloud2', 'cloud3', 'cloud4', 'cloud5', 'cloud6'];\n\n    //Generate initial cloud\n    this.generateCloud();\n\n    //Generate a new cloud every 5 seconds\n    this.time.addEvent({\n      delay: 5000,\n      callback: this.generateCloud,\n      callbackScope: this,\n      loop: true\n    });\n    this.add.image(320, 610, 'fence');\n    this.anims.create({\n      key: 'farmhouseAnimation',\n      frames: this.anims.generateFrameNumbers('farmhouseSpritesheet', {\n        start: 0,\n        end: 4\n      }),\n      frameRate: 6,\n      repeat: -1 // Repeat indefinitely\n    });\n\n    //Add farmhouse image and make it interactive\n    this.farmhouse = this.add.sprite(64, 624, 'farmhouseSpritesheet');\n    this.farmhouse.anims.play('farmhouseAnimation');\n    this.farmhouse.setInteractive();\n    Utility.addTintOnHover(this.farmhouse);\n\n    //Add market image and make it interactive\n    this.market = this.add.image(580, 624, 'market');\n    this.market.setInteractive();\n    Utility.addTintOnHover(this.market);\n    // Make market invisible for now until we have a nice market sprite\n    this.market.setVisible(false);\n    this.plots = []; // Create an array to store the plots\n\n    this.plots.push(this.add.sprite(200, 660, 'plot'));\n    this.plots.push(this.add.sprite(275, 660, 'plot'));\n    this.plots.push(this.add.sprite(350, 660, 'plot'));\n    this.plots.push(this.add.sprite(425, 660, 'plot'));\n    this.plots.push(this.add.sprite(200, 727, 'plot'));\n    this.plots.push(this.add.sprite(275, 727, 'plot'));\n    this.plots.push(this.add.sprite(350, 727, 'plot'));\n    this.plots.push(this.add.sprite(425, 727, 'plot'));\n    this.plots.forEach(plot => {\n      plot.setInteractive();\n      Utility.addTintOnHover(plot);\n    });\n\n    //When F key is pressed call toggleFullscreen function\n    this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.F).on('down', Utility.toggleFullscreen);\n\n    // Switch to inside farmhouse scene when farmhouse is clicked (Keeps FarmScene running in background)\n    this.market.on('pointerdown', () => {\n      this.scene.launch('MarketScene');\n    });\n\n    // Switch to inside farmhouse scene when farmhouse is clicked (Keeps FarmScene running in background)\n    this.farmhouse.on('pointerdown', () => {\n      this.scene.launch('InsideFarmhouseScene');\n    });\n\n    // this.add.text(300, 500, 'Hello, world!', {fontSize: 20, fill: '#000000'});\n\n    // let text = this.add.bitmapText(150, 500, 'pixelFont', 'Time: 12040', 16);\n    // text.setTint(0x000000);\n  }\n  generateCloud() {\n    // Generate a random y position\n    let y = Phaser.Math.Between(100, 560);\n\n    // Select a random cloud image\n    let randomIndex = Phaser.Math.Between(0, this.cloudImages.length - 1);\n    let randomImage = this.cloudImages[randomIndex];\n\n    // Create a new cloud at left edge of the screen and at the random y position, setDepth(-1) to make sure the clouds are behind the mountains\n    let cloud = this.physics.add.image(-50, y, randomImage).setDepth(-1);\n\n    // Set the cloud's velocity to the right\n    cloud.setVelocityX(20);\n\n    // Add the cloud to the clouds array\n    this.clouds.push(cloud);\n\n    // Loop through every cloud. If a cloud's x coordinate is greater than the canvas width, destroy it and remove it from the array\n    for (let i = this.clouds.length - 1; i >= 0; i--) {\n      if (this.clouds[i].x > this.game.config.width) {\n        this.clouds[i].destroy();\n        this.clouds.splice(i, 1);\n      }\n    }\n  }\n}","map":{"version":3,"names":["Utility","FarmScene","Phaser","Scene","constructor","key","preload","load","image","spritesheet","frameWidth","frameHeight","create","add","setDepth","sun","sprite","setInteractive","addTintOnHover","clouds","cloudImages","generateCloud","time","addEvent","delay","callback","callbackScope","loop","anims","frames","generateFrameNumbers","start","end","frameRate","repeat","farmhouse","play","market","setVisible","plots","push","forEach","plot","input","keyboard","addKey","Input","Keyboard","KeyCodes","F","on","toggleFullscreen","scene","launch","y","Math","Between","randomIndex","length","randomImage","cloud","physics","setVelocityX","i","x","game","config","width","destroy","splice"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/w4_team_project/database/ProductivityValleyDatabase/django/connection/src/js/FarmScene.js"],"sourcesContent":["import Utility from \"../../../../../../js/Utility.js\";\n\nexport default class FarmScene extends Phaser.Scene {\n    constructor() {\n        super({ key: 'FarmScene' });\n    }\n\n\n    preload () {\n        // this.load.bitmapFont('pixelFont', '../fonts/pixeloperatorbitmap.png', '../fonts/pixeloperatorbitmap.xml');\n\n        this.load.image('farmBackground', '../assets/farm-background.png');\n        this.load.image('mountains', '../assets/mountains.png');\n        this.load.image('fence', '../assets/fence.png');\n        this.load.spritesheet('farmhouseSpritesheet', '../assets/farmhouse-animation.png', { frameWidth: 80, frameHeight: 128 });\n        this.load.image('market', '../assets/market.png');\n        this.load.image('sun', '../assets/sun.png');\n        this.load.image('plot', '../assets/plot.png');\n\n        this.load.image('cloud1', '../assets/clouds/cloud1.png');\n        this.load.image('cloud2', '../assets/clouds/cloud2.png');\n        this.load.image('cloud3', '../assets/clouds/cloud3.png');\n        this.load.image('cloud4', '../assets/clouds/cloud4.png');\n        this.load.image('cloud5', '../assets/clouds/cloud5.png');\n        this.load.image('cloud6', '../assets/clouds/cloud6.png');\n    }\n\n    create () {\n        this.add.image(320, 600, 'farmBackground').setDepth(-2);\n\n        this.add.image(320, 570, 'mountains')\n\n        this.sun = this.add.sprite(320, 490, 'sun');\n        this.sun.setInteractive();\n        Utility.addTintOnHover(this.sun);\n\n        this.clouds = [];\n        this.cloudImages = ['cloud1', 'cloud2', 'cloud3', 'cloud4', 'cloud5', 'cloud6'];\n        \n        //Generate initial cloud\n        this.generateCloud();\n\n        //Generate a new cloud every 5 seconds\n        this.time.addEvent({\n            delay: 5000,\n            callback: this.generateCloud,\n            callbackScope: this,\n            loop: true\n        });\n\n        this.add.image(320, 610, 'fence');\n\n\n\n        this.anims.create({\n            key: 'farmhouseAnimation',\n            frames: this.anims.generateFrameNumbers('farmhouseSpritesheet', { start: 0, end: 4 }),\n            frameRate: 6,\n            repeat: -1 // Repeat indefinitely\n        });\n\n        //Add farmhouse image and make it interactive\n        this.farmhouse = this.add.sprite(64, 624, 'farmhouseSpritesheet');\n        this.farmhouse.anims.play('farmhouseAnimation');\n        this.farmhouse.setInteractive();\n        Utility.addTintOnHover(this.farmhouse);\n\n        //Add market image and make it interactive\n        this.market = this.add.image(580, 624, 'market');\n        this.market.setInteractive();\n        Utility.addTintOnHover(this.market);\n        // Make market invisible for now until we have a nice market sprite\n        this.market.setVisible(false);\n\n\n\n        this.plots = [];  // Create an array to store the plots\n\n        this.plots.push(this.add.sprite(200, 660, 'plot'));\n        this.plots.push(this.add.sprite(275, 660, 'plot'));\n        this.plots.push(this.add.sprite(350, 660, 'plot'));\n        this.plots.push(this.add.sprite(425, 660, 'plot'));\n        this.plots.push(this.add.sprite(200, 727, 'plot'));\n        this.plots.push(this.add.sprite(275, 727, 'plot'));\n        this.plots.push(this.add.sprite(350, 727, 'plot'));\n        this.plots.push(this.add.sprite(425, 727, 'plot'));\n        \n        this.plots.forEach((plot) => {\n            plot.setInteractive();\n            Utility.addTintOnHover(plot);\n        });\n\n\n        \n\n\n\n        //When F key is pressed call toggleFullscreen function\n        this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.F).on('down', Utility.toggleFullscreen);\n\n\n        // Switch to inside farmhouse scene when farmhouse is clicked (Keeps FarmScene running in background)\n        this.market.on('pointerdown', () => {\n            this.scene.launch('MarketScene');\n        });\n\n        // Switch to inside farmhouse scene when farmhouse is clicked (Keeps FarmScene running in background)\n        this.farmhouse.on('pointerdown', () => {\n            this.scene.launch('InsideFarmhouseScene');\n        });\n\n\n\n\n        // this.add.text(300, 500, 'Hello, world!', {fontSize: 20, fill: '#000000'});\n\n        // let text = this.add.bitmapText(150, 500, 'pixelFont', 'Time: 12040', 16);\n        // text.setTint(0x000000);\n        \n\n    }\n\n\n    generateCloud() {\n        // Generate a random y position\n        let y = Phaser.Math.Between(100, 560);\n\n        // Select a random cloud image\n        let randomIndex = Phaser.Math.Between(0, this.cloudImages.length - 1);\n        let randomImage = this.cloudImages[randomIndex];\n\n        // Create a new cloud at left edge of the screen and at the random y position, setDepth(-1) to make sure the clouds are behind the mountains\n        let cloud = this.physics.add.image(-50, y, randomImage).setDepth(-1);\n\n        // Set the cloud's velocity to the right\n        cloud.setVelocityX(20);\n\n        // Add the cloud to the clouds array\n        this.clouds.push(cloud);\n\n        // Loop through every cloud. If a cloud's x coordinate is greater than the canvas width, destroy it and remove it from the array\n        for (let i = this.clouds.length - 1; i >= 0; i--) {\n            if (this.clouds[i].x > this.game.config.width) {\n                this.clouds[i].destroy();\n                this.clouds.splice(i, 1);\n            }\n        }\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}